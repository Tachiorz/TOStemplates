//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: common.bt
// Author: exec, tachiorz
// Revision:
// Purpose:
//--------------------------------------

// Our custom packet header, made from pale log
typedef struct 
{
    char Time[12];
    ushort Length;
    byte Type;
} Frame <optimize=false>;

// Length-prefixed string
typedef struct
{
    short length;
    if(length > 0)
      char text[length];
}
lpString <read=lpStringRead>;

string lpStringRead(lpString &v)
{
    if(v.length > 0)
        return v.text;
    else return "";
}

// Key:Value type with two length-prefixed strings
typedef struct
{
    lpString key;
    lpString value;
}
msgParameter <read=msgParameterRead>;

string msgParameterRead(msgParameter &v)
{
    return v.key.text + " : " + v.value.text;
}


//TODO: generate switch for property types

typedef struct 
{
    short id;
    if (id == 4496)
    {
        lpString val;
    }
    else
        float val;
} property  <read=ShowProp, optimize=false>;


string ShowProp(property &p)
{
  local char ret[];
  local char val_type[];
  if (p.id == 4496) 
     SPrintf( ret,"%d : %s ", p.id , p.val.text );
  else
     SPrintf( ret,"%d : %.0f" , p.id , p.val );
  return( ret );
}

typedef struct
{
  float X;
  float Y;
  float Z;
} Position <read=ShowPosition, optimize=false>;

string ShowPosition(Position &p)
{
  local char ret[];
  SPrintf( ret,"X %.3f : Y %.3f : Z %.3f", p.X, p.Y, p.Z );
  return( ret );
}

typedef struct
{
  float X;
  float Y;
} Vector <read=ShowVector, optimize=false>;

string ShowVector(Vector &p)
{
  local char ret[];
  SPrintf( ret,"X %.3f : Y %.3f", p.X, p.Y);
  return( ret );
}
