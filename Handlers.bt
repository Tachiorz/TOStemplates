#include "common.bt"
#include "enums.bt"

#include "Handlers\CB_LOGIN.bt"
#include "Handlers\CZ_CONNECT.bt"
#include "Handlers\BC_LOGINOK.bt"
#include "Handlers\BC_IES_MODIFY_LIST.bt"
#include "Handlers\BC_COMMANDER_LIST.bt"
#include "Handlers\ZC_OBJECT_PROPERTY.bt"
#include "Handlers\ZC_ENTER_MONSTER.bt"
#include "Handlers\ZC_ADDON_MSG.bt"
#include "Handlers\ZC_DIALOG_SELECT.bt"
#include "Handlers\ZC_SYSTEM_MSG.bt"


typedef enum
{
    CLIENT = 0,
    SERVER = 1,
} PacketType;

typedef struct 
{
    char Time[12];
    ushort Length;
    byte Type;
} Frame <optimize=false>;

typedef struct 
{
    Frame header;
    short Op;
    uint idx;
    uint crc;
switch( GetPacketName(Op) ) 
{
    case "CB_LOGIN": CB_LOGIN packet; break;
    case "CZ_CONNECT": CZ_CONNECT packet; break;
    default: byte UNKNOWN[Length-10] <optimize=false, fgcolor=0x666666>;
}

} ClientPacket <optimize=false, bgcolor=0xAAFFAA>;

string DisplayClientPacket(ClientPacket &p)
{
    local string PacketDisplayStr;
    PacketName = GetPacketName(p.Op);
    //local string time = TimeTToString( p.header.Time, "hh:mm:ss" );
    SPrintf(PacketDisplayStr, "SEND@%s: %s (%d)", p.header.Time, PacketName, p.Op);
    return PacketDisplayStr;
}

typedef struct 
{
    Frame header;
    short Op;
    uint idx;
switch( GetPacketName(Op) ) 
{
	case "BC_LOGINOK": BC_LOGINOK packet; break;
	case "BC_IES_MODIFY_LIST": BC_IES_MODIFY_LIST packet; break;
	case "BC_COMMANDER_LIST": BC_COMMANDER_LIST packet; break;
	case "ZC_OBJECT_PROPERTY": ZC_OBJECT_PROPERTY packet; break;
	case "ZC_ENTER_MONSTER": ZC_ENTER_MONSTER packet; break;
	case "ZC_ADDON_MSG": ZC_ADDON_MSG packet; break;
	case "ZC_DIALOG_SELECT": ZC_DIALOG_SELECT packet; break;
	case "ZC_SYSTEM_MSG": ZC_DIALOG_SELECT packet; break;
	
    default: byte UNKNOWN[Length-6] <optimize=false, fgcolor=0x666666>;
}

} ServerPacket <optimize=false, bgcolor=0xAAAAFF>;

string DisplayServerPacket(ServerPacket &p)
{
    local string PacketDisplayStr;
    PacketName = GetPacketName(p.Op);
    //local string time = TimeTToString( p.header.Time, "hh:mm:ss" );
    SPrintf(PacketDisplayStr, "RECV@%s: %s (%d)", p.header.Time, PacketName, p.Op);
    return PacketDisplayStr;
}
